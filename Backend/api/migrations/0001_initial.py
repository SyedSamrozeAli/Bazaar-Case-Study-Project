# Generated by Django 5.2 on 2025-04-12 18:47

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Sales',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('total_quantity', models.PositiveIntegerField()),
                ('total_tax', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('overall_discount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='StoreAdmin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, related_name='store_admin_users', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='store_admin_users', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('country', models.CharField(max_length=100)),
                ('city', models.CharField(max_length=100)),
                ('area', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'constraints': [models.UniqueConstraint(fields=('country', 'city', 'area'), name='unique_address')],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('product_name', models.CharField(max_length=50)),
                ('cost_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('sale_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('discount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'indexes': [models.Index(fields=['product_name'], name='api_product_product_27be81_idx'), models.Index(fields=['created_at'], name='api_product_created_a91d70_idx')],
                'constraints': [models.CheckConstraint(condition=models.Q(('cost_price__gte', 0)), name='check_cost_price'), models.CheckConstraint(condition=models.Q(('sale_price__gte', 0)), name='check_sale_price'), models.CheckConstraint(condition=models.Q(('discount__gte', 0)), name='check_product_discount')],
            },
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('quantity', models.PositiveIntegerField(default=0)),
                ('reorder_level', models.PositiveIntegerField(default=10)),
                ('last_restock_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory', to='api.product')),
            ],
        ),
        migrations.CreateModel(
            name='SalesItems',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('quantity', models.PositiveIntegerField()),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('discount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sales_item', to='api.product')),
                ('sales', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sales_item', to='api.sales')),
            ],
        ),
        migrations.AddField(
            model_name='sales',
            name='products',
            field=models.ManyToManyField(related_name='sales', through='api.SalesItems', to='api.product'),
        ),
        migrations.CreateModel(
            name='Store',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('address', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='store', to='api.address')),
                ('admin', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='store', to=settings.AUTH_USER_MODEL)),
                ('products', models.ManyToManyField(related_name='store', through='api.Inventory', to='api.product')),
            ],
        ),
        migrations.AddField(
            model_name='sales',
            name='store',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sales', to='api.store'),
        ),
        migrations.CreateModel(
            name='InventoryMovement',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('quantity', models.IntegerField()),
                ('movement_type', models.CharField(choices=[('STOCK_IN', 'Stock In'), ('SALE', 'Sale'), ('REMOVAL', 'Manual Removal'), ('ADJUSTMENT', 'Inventory Adjustment'), ('TRANSFER', 'Store Transfer')], max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('inventory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='movements', to='api.inventory')),
                ('destination_store', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='incoming_movements', to='api.store')),
                ('source_store', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='outgoing_movements', to='api.store')),
            ],
        ),
        migrations.AddField(
            model_name='inventory',
            name='store',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory', to='api.store'),
        ),
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('contact_no', models.CharField(max_length=15, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'indexes': [models.Index(fields=['name'], name='api_supplie_name_88d2fc_idx')],
            },
        ),
        migrations.AddField(
            model_name='inventory',
            name='supplier',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory', to='api.supplier'),
        ),
        migrations.AddIndex(
            model_name='salesitems',
            index=models.Index(fields=['sales', 'product'], name='api_salesit_sales_i_d8a416_idx'),
        ),
        migrations.AddIndex(
            model_name='salesitems',
            index=models.Index(fields=['created_at'], name='api_salesit_created_a41b38_idx'),
        ),
        migrations.AddConstraint(
            model_name='salesitems',
            constraint=models.CheckConstraint(condition=models.Q(('unit_price__gte', 0)), name='check_unit_price'),
        ),
        migrations.AddConstraint(
            model_name='salesitems',
            constraint=models.CheckConstraint(condition=models.Q(('discount__gte', 0)), name='check_sales_discount'),
        ),
        migrations.AddIndex(
            model_name='store',
            index=models.Index(fields=['name'], name='api_store_name_d69912_idx'),
        ),
        migrations.AddIndex(
            model_name='store',
            index=models.Index(fields=['address'], name='api_store_address_2923f9_idx'),
        ),
        migrations.AddIndex(
            model_name='sales',
            index=models.Index(fields=['store'], name='api_sales_store_i_f9aa5b_idx'),
        ),
        migrations.AddIndex(
            model_name='sales',
            index=models.Index(fields=['created_at'], name='api_sales_created_08618d_idx'),
        ),
        migrations.AddConstraint(
            model_name='sales',
            constraint=models.CheckConstraint(condition=models.Q(('total_tax__gte', 0)), name='check_total_tax'),
        ),
        migrations.AddConstraint(
            model_name='sales',
            constraint=models.CheckConstraint(condition=models.Q(('overall_discount__gte', 0)), name='check_sales_total_discount'),
        ),
        migrations.AddConstraint(
            model_name='sales',
            constraint=models.CheckConstraint(condition=models.Q(('total_price__gte', 0)), name='check_sales_total_price'),
        ),
        migrations.AddIndex(
            model_name='inventorymovement',
            index=models.Index(fields=['created_at'], name='api_invento_created_2cb4f5_idx'),
        ),
        migrations.AddIndex(
            model_name='inventorymovement',
            index=models.Index(fields=['movement_type'], name='api_invento_movemen_754e93_idx'),
        ),
        migrations.AddIndex(
            model_name='inventorymovement',
            index=models.Index(fields=['inventory'], name='api_invento_invento_ff1ec0_idx'),
        ),
        migrations.AddIndex(
            model_name='inventory',
            index=models.Index(fields=['store', 'product'], name='api_invento_store_i_953dcf_idx'),
        ),
        migrations.AddIndex(
            model_name='inventory',
            index=models.Index(fields=['created_at'], name='api_invento_created_75623b_idx'),
        ),
        migrations.AddConstraint(
            model_name='inventory',
            constraint=models.UniqueConstraint(fields=('store', 'product', 'supplier'), name='unique_store_product_supplier'),
        ),
    ]
